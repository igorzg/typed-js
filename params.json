{"name":"Typed-js","tagline":"Dynamic type checker for nodejs >= v4.0.0","body":"TYPED JS [![Build Status](https://travis-ci.org/igorzg/typed-js.svg?branch=master)](https://travis-ci.org/igorzg/typed-js)\r\n====\r\n\r\n# Support\r\nDynamic type checker for nodejs >= v4.0.0\r\nIt support only class syntax in order to have type checking all classes must be inherited from Type class\r\n\r\n# Type Inheritance\r\nAll class members must be defined in constructor super call otherwise if you try to assign member to initialized object\r\nType object will throw an type error. After object initialization object is prevented from extension\r\n```javascript\r\nclass User extends Type {\r\n    constructor(name, password) {\r\n        super({\r\n            username: Type.STRING,\r\n            password: Type.STRING\r\n        });\r\n        this.username = name;\r\n        this.password = password;\r\n    }\r\n    getUserName() {\r\n        return this.username;\r\n    }\r\n    setUserName(user) {\r\n        this.username = user;\r\n    }\r\n}\r\nvar user = new User('Igor', 'Ivanovic');\r\nuser.getUserName(); // Igor\r\nuser.setUserName(1) // Throws type error\r\nuser.assign = 1 // Throws type error , all members must be defined at super call with proper type\r\n// Predefined function inside of type\r\nuser.destroy(); // clear all references to initialized object\r\n```\r\n\r\n# Constants\r\n```javascript\r\nType.OBJECT = \"object\";\r\nType.STRING = \"string\";\r\nType.ARRAY = \"array\";\r\nType.REGEX = \"regexp\";\r\nType.NUMBER = \"number\";\r\nType.BOOLEAN = \"boolean\";\r\nType.FUNCTION = \"function\";\r\nType.DATE = \"date\";\r\nType.UNDEFINED = \"undefined\";\r\nType.NULL = \"null\";\r\n```\r\n# Type Functions\r\n### Type.isNull(value)\r\nCheck if value is nullable\r\n```javascript\r\nType.isNull(null); // true\r\n```\r\n### Type.isObject(value)\r\nCheck if value is object\r\n```javascript\r\nType.isObject({}); // true\r\nType.isObject([]); // true\r\n```\r\n### Type.isRegExp(value)\r\nCheck if value is regular expression object\r\n```javascript\r\nType.isRegExp({}); // false\r\nType.isRegExp(/abc/i); // true\r\n```\r\n### Type.isDate(value)\r\nCheck if value is date object\r\n```javascript\r\nType.isDate({}); // false\r\nType.isDate(new Date); // true\r\n```\r\n### Type.isFunction(value)\r\nCheck if value is function object\r\n```javascript\r\nType.isFunction({}); // false\r\nType.isFunction(function () {}); // true\r\n```\r\n### Type.isArray(value)\r\nCheck if value is array object\r\n```javascript\r\nType.isArray({}); // false\r\nType.isArray([]); // true\r\n```\r\n### Type.isNumber(value)\r\nCheck if value is number\r\n```javascript\r\nType.isNumber(1); // true\r\nType.isNumber(NaN); // true\r\nType.isNumber([]); // false\r\n```\r\n### Type.isString(value)\r\nCheck if value is string\r\n```javascript\r\nType.isString(1); // false\r\nType.isString(\"\"); // true\r\n```\r\n### Type.isBoolean(value)\r\nCheck if value is boolean\r\n```javascript\r\nType.isBoolean(1); // false\r\nType.isBoolean(true); // true\r\n```\r\n### Type.isUndefined(value)\r\nCheck if value is undefined\r\n```javascript\r\nType.isUndefined(null); // false\r\nType.isUndefined(undefined); // true\r\n```\r\n### Type.isInitialized(value)\r\nCheck if value is initialized, null is not considered as initialized\r\n```javascript\r\nType.isInitialized(null); // false\r\nType.isInitialized(undefined); // false\r\n```\r\n### Type.getType(value)\r\nGet type of value\r\n```javascript\r\nType.getType(null); // null\r\nType.getType(undefined); // undefined\r\nType.getType({}); // object\r\nType.getType([]); // array\r\n```\r\n### Type.assert(type, value)\r\nGet type of value. Type should be valid type constant\r\n```javascript\r\nType.assert(Type.NULL, null); // true\r\nType.assert(Type.OBJECT, undefined); // false\r\nType.assert(Type.OBJECT, {}); // true\r\nType.assert(Type.ARRAY, []); // true\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}